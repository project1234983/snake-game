import pygame
import random
import sys

pygame.init()
pygame.mixer.init()

eat_sound = pygame.mixer.Sound("123.mp3")
gameover_sound = pygame.mixer.Sound("GameOver.mp3")

WIDTH, HEIGHT = 1200, 700
CELL_SIZE = 20

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BROWN = (139, 69, 19)
DARK_GREEN = (0, 100, 0)
ORANGE = (255, 165, 0)  # Snake color

FONT = pygame.font.SysFont("timesnewroman", 30, bold=True)
BIG_FONT = pygame.font.SysFont("consolas", 48, bold=True)

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("üêç Snake Game (Orange Snake with White Eyes)")
clock = pygame.time.Clock()
FPS = 10

background_img = pygame.image.load("background.png").convert()
background_img = pygame.transform.scale(background_img, (WIDTH, HEIGHT))


def draw_text(surface, text, font, color, x, y):
    surface.blit(font.render(text, True, color), (x, y))


def draw_new_snake_body(surface, snake):
    for segment in snake:
        x, y = segment
        rect = pygame.Rect(x, y, CELL_SIZE, CELL_SIZE)
        pygame.draw.rect(surface, ORANGE, rect, border_radius=6)


def draw_new_snake_head(surface, pos, direction):
    x, y = pos
    rect = pygame.Rect(x, y, CELL_SIZE, CELL_SIZE)
    pygame.draw.rect(surface, ORANGE, rect, border_radius=6)  # Head base

    eye_radius = 4
    pupil_radius = 2

    if direction == [CELL_SIZE, 0]:  # Right
        left_eye_center = (x + CELL_SIZE - 8, y + 6)
        right_eye_center = (x + CELL_SIZE - 8, y + CELL_SIZE - 6)
    elif direction == [-CELL_SIZE, 0]:  # Left
        left_eye_center = (x + 8, y + 6)
        right_eye_center = (x + 8, y + CELL_SIZE - 6)
    elif direction == [0, CELL_SIZE]:  # Down
        left_eye_center = (x + 6, y + CELL_SIZE - 8)
        right_eye_center = (x + CELL_SIZE - 6, y + CELL_SIZE - 8)
    else:  # Up
        left_eye_center = (x + 6, y + 8)
        right_eye_center = (x + CELL_SIZE - 6, y + 8)

    pygame.draw.circle(surface, WHITE, left_eye_center, eye_radius)
    pygame.draw.circle(surface, WHITE, right_eye_center, eye_radius)

    pupil_offset = {
        (CELL_SIZE, 0): (1, 0),
        (-CELL_SIZE, 0): (-1, 0),
        (0, CELL_SIZE): (0, 1),
        (0, -CELL_SIZE): (0, -1),
    }
    offset = pupil_offset.get(tuple(direction), (0, 0))

    pygame.draw.circle(surface, BLACK, (left_eye_center[0] + offset[0], left_eye_center[1] + offset[1]), pupil_radius)
    pygame.draw.circle(surface, BLACK, (right_eye_center[0] + offset[0], right_eye_center[1] + offset[1]), pupil_radius)


def show_welcome_screen():
    screen.blit(background_img, (0, 0))
    
    title_text = BIG_FONT.render("Welcome to the Snake Game!", True, ORANGE)
    instruction_text = FONT.render("Use arrow keys to move the snake.", True, WHITE)
    start_text = FONT.render("Press any key to start", True, WHITE)
    
    # Center the texts
    title_x = WIDTH // 2 - title_text.get_width() // 2
    instruction_x = WIDTH // 2 - instruction_text.get_width() // 2
    start_x = WIDTH // 2 - start_text.get_width() // 2
    
    screen.blit(title_text, (title_x, HEIGHT // 3))
    screen.blit(instruction_text, (instruction_x, HEIGHT // 3 + 70))
    screen.blit(start_text, (start_x, HEIGHT // 3 + 140))
    
    pygame.display.update()

    waiting = True
    while waiting:
        clock.tick(60)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                waiting = False


def game_loop():
    snake = [[100, 100], [80, 100], [60, 100]]
    direction = [CELL_SIZE, 0]
    score = 0

    food = [
        random.randint(0, (WIDTH - CELL_SIZE) // CELL_SIZE) * CELL_SIZE,
        random.randint(0, (HEIGHT - CELL_SIZE) // CELL_SIZE) * CELL_SIZE
    ]

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and direction[1] == 0:
                    direction = [0, -CELL_SIZE]
                elif event.key == pygame.K_DOWN and direction[1] == 0:
                    direction = [0, CELL_SIZE]
                elif event.key == pygame.K_LEFT and direction[0] == 0:
                    direction = [-CELL_SIZE, 0]
                elif event.key == pygame.K_RIGHT and direction[0] == 0:
                    direction = [CELL_SIZE, 0]

        new_head = [snake[0][0] + direction[0], snake[0][1] + direction[1]]
        snake.insert(0, new_head)

        if new_head == food:
            eat_sound.play()
            score += 1
            while True:
                food = [
                    random.randint(0, (WIDTH - CELL_SIZE) // CELL_SIZE) * CELL_SIZE,
                    random.randint(0, (HEIGHT - CELL_SIZE) // CELL_SIZE) * CELL_SIZE
                ]
                if food not in snake:
                    break
        else:
            snake.pop()

        if (new_head[0] < 0 or new_head[0] >= WIDTH or
                new_head[1] < 0 or new_head[1] >= HEIGHT or
                new_head in snake[1:]):
            return show_game_over(score)

        screen.blit(background_img, (0, 0))

        if len(snake) > 1:
            draw_new_snake_body(screen, snake[1:])

        draw_new_snake_head(screen, snake[0], direction)

        # Draw food (apple)
        apple_center = (food[0] + CELL_SIZE // 2, food[1] + CELL_SIZE // 2)
        pygame.draw.circle(screen, RED, apple_center, CELL_SIZE // 2 - 2)
        pygame.draw.rect(screen, BROWN, (apple_center[0] - 2, food[1] - 2, 4, 8), border_radius=2)
        pygame.draw.polygon(screen, DARK_GREEN, [
            (apple_center[0] - 6, food[1]),
            (apple_center[0] - 14, food[1] - 6),
            (apple_center[0] - 4, food[1] + 4)
        ])

        # Center the score text at the top
        score_text = FONT.render(f"Score: {score}", True, WHITE)
        score_x = WIDTH // 2 - score_text.get_width() // 2
        screen.blit(score_text, (score_x, 10))

        pygame.display.update()
        clock.tick(FPS)


def show_game_over(score):
    gameover_sound.play()

    text_surface = BIG_FONT.render("Game Over", True, RED)
    score_text = FONT.render(f"Your Score: {score}", True, BLACK)
    instruction_text = FONT.render("Press R to Restart or Q to Quit", True, BROWN)

    padding = 20
    texts = [text_surface, score_text, instruction_text]
    box_width = max(text.get_width() for text in texts) + padding * 2
    box_height = sum(text.get_height() for text in texts) + padding * 4

    box_x = WIDTH // 2 - box_width // 2
    box_y = HEIGHT // 2 - box_height // 2

    fade_surface = pygame.Surface((WIDTH, HEIGHT))
    fade_surface.fill(WHITE)
    fade_alpha = 0

    while fade_alpha < 255:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        screen.fill(WHITE)
        fade_surface.set_alpha(fade_alpha)
        screen.blit(fade_surface, (0, 0))

        pygame.draw.rect(screen, (230, 230, 230), (box_x, box_y, box_width, box_height), border_radius=10)
        pygame.draw.rect(screen, BLACK, (box_x, box_y, box_width, box_height), width=3, border_radius=10)

        current_y = box_y + padding
        screen.blit(text_surface, (box_x + (box_width - text_surface.get_width()) // 2, current_y))
        current_y += text_surface.get_height() + padding
        screen.blit(score_text, (box_x + (box_width - score_text.get_width()) // 2, current_y))
        current_y += score_text.get_height() + padding
        screen.blit(instruction_text, (box_x + (box_width - instruction_text.get_width()) // 2, current_y))

        fade_alpha += 5
        pygame.display.update()
        pygame.time.delay(30)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    game_loop()
                elif event.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()

        pygame.display.update()
        clock.tick(60)


if __name__ == "__main__":
    show_welcome_screen()
    game_loop()
